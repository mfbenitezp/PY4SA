[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Getting started",
    "section": "",
    "text": "Welcome to the second part of the module of GG3209 Spatial Analysis with GIS. This part will take advantage of the initial part, which provided you with a solid understanding of spatial data formats (vector&raster) and use them to perform multiple types of analysis like the so-called Multi-Criteria Evaluation (MCE) using the widely popular Open-Source GIS tool, QGIS.\nNow in this second part, you will be guided to install, handle and use another powerful tool in the geospatial field, Python. It is a free and open-sourced scripting language that was commonly used to automate tasks in the GIS world. Nowadays is one of the most popular programming languages, especially for GIScience. It is widely used in the private, public sectors and academia for cutting-edge research, where scripts, front-end and back-end components are created using this language. Python is also widley popular as a easy-to-code programming language to deploy new methods, share knowledge, list and fetch data, and run spatial analysis through multiple scientific fields.\nIn fact, most companies, or institutes where you probably want to apply once you finish your degree, will be happily interested in your development skills using Python and will validate your current ork in platforms like GitHub, where you can share and disseminate your project. At this stage whether you are student of Geography or Sustainable Development, you probably are familiar with R and its powerful capacity for spatial statistics. Now this module aims to introduce you Python which is mainly used for scalable and robust spatial analysis, front-end applications and process vast among of data. Every day, more packages and code-repositories are shared and maintained for easy use and installation, allowing developers or analysts from all backgrounds and expertise use and integrate them into their own code.\nThis part of the module and the lab (technical practice) are meant to be an introduction to Python and some of the spatial libraries. Like any other new language, you need to learn the basic rules (syntax) to write your own scripts, and soon with practice, you will become a python developer.\n\n1 Content\nThe content included in this module stands to be a brief introduction to Python where you get familiar with multiple concepts up to now new for most of you, we will cover the basis of the programming logic, Python, Version Control (essential for reproducibility and open science) and some of the main libraries for geospatial analysis.\nThere are many other concepts and interesting exercises we could apply to learn and see the potential of Python in handling spatial data. However we have designed this part in the way you can see the difference between using GIS tools (user-interface based) and creating code to run script routines. As any other new language the best way to master it is through constant practice. So don’t get stress out if you find out this module difficult or different, you will slowly get better and efficient creating new scripts.\n\n\n\n\n\n\nNote\n\n\n\nIf you think this is the line of work you would like to pursue, you can learn more about in the module GG4257 - Urban Analytics: A Toolkit for Sustainable Urban Development where we have more time to properly described other libraries, more practical exercises, and use Python for more advance analysis.\n\n\nThe module is structured in the following lectures including the correspondent practical Lab.\n\nIntroduction to Python, Jupyter Notebooks, and GIT\nWorking with tabular data ( NumPy, Pandas)\nWorking with spatial data in Python (GeoPandas, Rasterio)\nClustering analysis\n\n\n\nAdvisement\n\n\n\n\n\n\nTip\n\n\n\nDo not be afraid of failure or getting errors, even during the installation process; it has happened to all of us, regardless of the level of expertise or number of projects created. In programming, failure is part of the process; The key is to find the basis of any issue and understand how code, logic, and syntax work in harmony to get the results you are expecting.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nAll the work described here can be executed in the computer labs, ad we highly recommend you use that environment for all the practical exercises included in this book. However we have also integrated instructions for you to install a specific list of components to get an essential but scalable environment that allows you to write, clone, debug and execute code for this course.\n\n\n\n\nAssessment\nThis part of the module is assessed by 100% coursework\n\n\nUniversity Staff\nModule Co-ordinators: Dr Urška Demšar or Dr Fernando Benitez-Paez\nOffice hours: By appointment online and live during the labs\nLab assistants: Dr Charlotte van der Lijn , Ali Moayedi, Benjamin Ong, Georg Kodl\n\n\nOur Research\n\nIf you want to know more about why spatial data holds the key to unlocking a deeper understanding of our planet and its intricate systems. Let’s BEGIN a spatial and data-driven conversation and be part of our multidisciplinary group in St Andrews. https://begin.wp.st-andrews.ac.uk/"
  },
  {
    "objectID": "intro.html#slides",
    "href": "intro.html#slides",
    "title": "2  Introduction",
    "section": "2.1 Slides",
    "text": "2.1 Slides\nClick here to open the slides in a separate tab Week 1 - Slides"
  },
  {
    "objectID": "intro.html#installing-and-setting-up-your-python-environment",
    "href": "intro.html#installing-and-setting-up-your-python-environment",
    "title": "2  Introduction",
    "section": "2.2 Installing and setting up your Python environment",
    "text": "2.2 Installing and setting up your Python environment\n\n\n\nSource: https://xkcd.com/1987/\n\n\nPerhaps the first exercise that helps you get a sense of what is like of working with Python is setting up your first Python Environment - PyEnv. A PyEnv is an independent space where you install all the packages, python version and software components you would need to write and run your scripts. Although is not a compulsory activity, it is recommended to do it before you jump to write and deploy python scripts. It is also relevant that you feel comfortable working with the Terminal or Command-Prompt in your operating system, whether it is a Windows, Mac, or Linux computer.\nTechnically you could manually install every single library we need. However, we will use a predefined Python environment file that includes all the packages and the Python interpreter we will need for this course. The reason for doing this, is because installing Python libraries and its dependencies can get very tricky and confusing, depending on the operating system, the version, the path where we install, the type of users, even the package manager that suppose to help us can actually be a source of confusion. So, the best way and certainly the most secure way is using a unified single environment file and a package manager to create our Python Environment - PyEnv.\n\n2.2.1 Virtual Python Environments:\nVirtual environment in python is a programming environment which works in a way that the Python interpreter, libraries, and scripts installed into it are isolated from the ones installed in other virtual environments (or used by the operating system, important in macOS). This ensures that all the installed packages work nicely together. You can create multiple environments on your computer for different projects (having e.g., different versions of Python and specific libraries), and you can swap easily between environments by activating them from the command prompt with a single command. There will be instructions to doing that in the following sections."
  },
  {
    "objectID": "intro.html#python-package-manager-mini-conda",
    "href": "intro.html#python-package-manager-mini-conda",
    "title": "2  Introduction",
    "section": "2.3 Python Package Manager – Mini-Conda :",
    "text": "2.3 Python Package Manager – Mini-Conda :\n\n\n\n\n\nLet’s start with the package manager, we will use Conda, more specifically Mini-Conda (a lighter version of Conda), which is a package, dependency and environment management for any language including Python. It is an open-source component, and can be installed on Windows, macOS, and Linux. With MiniConda you could quickly installs, runs, and updates packages and their dependencies. Mini-Conda easily creates, saves, loads, and switches between environments on your local computer.\n\n\n\n\n\n\nImportant\n\n\n\nFor MacOS users, please be aware that macOS already includes an old version of Python, so it is needed to install an updated version of Python that works with the other packages and dependencies that we need for this course.\n\n\nGot to: https://docs.conda.io/en/latest/miniconda.html and get the installer based on your operating system.\n\nOnce you have downloaded the installer, double click on the installer file to install it. In general, you could follow the default options, but for this course, make sure you pick the following:\n\nSelect “Just Me” during the installation, and MiniConda will only be available for the current user. This will not require any administrator rights for the installation.\n\nMake sure you pick all the advanced installation options.\n\nAfter the installation is complete, you can validate that python and MiniConda were installed appropriately by running the following commands in your terminal or command prompt.\n\nOpen the Anaconda Prompt (miniconda3) or Terminal for macOS, from the Start menu (Apps) and run the command conda ––version, it should return something like.\n\nYou might have noticed that I also ran the command python ––version this one is to validate the python version you have in your system (e.g., 3.10.9)\nIf you have any problems with the Miniconda installation, you can find some installation tips on the Miniconda website."
  },
  {
    "objectID": "intro.html#installing-a-python-package-manager-mamba",
    "href": "intro.html#installing-a-python-package-manager-mamba",
    "title": "2  Introduction",
    "section": "2.4 Installing a python package manager – Mamba",
    "text": "2.4 Installing a python package manager – Mamba\nOk, now your computer has MiniConda installed; the next step is installing a python package manager. We will use the python package manager called Mamba to handle the installation of python packages in Miniconda. This is particularly important as mamba will help us ensure everything we install or remove is consistent. This can be very tedious work, so Mamba is a very convenient tool for the consistency of our virtual environments. Having a python package manager is not always a requirement when you set your virtual environment but will make your life easier when you start to create multiple environments.\n\nOpen a terminal window or command prompt in Windows (as an admin user) and run the following command:\nconda install mamba -n base -c conda-forge\nIf you get a message asking you to confirm the installation of new packages type yes and Enter"
  },
  {
    "objectID": "working_tab_data.html",
    "href": "working_tab_data.html",
    "title": "3  Working with tabular Data",
    "section": "",
    "text": "This lecture\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "working_spat_data.html",
    "href": "working_spat_data.html",
    "title": "4  Working with Spatial Data",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "USL_Clustering.html",
    "href": "USL_Clustering.html",
    "title": "5  Unsupervised statistical learning – Clustering",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "auxillary_data.html",
    "href": "auxillary_data.html",
    "title": "6  Auxiliary Data",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  }
]